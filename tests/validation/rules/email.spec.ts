import { email } from 'sefirot/validation/rules'

describe('validation/rules/email', () => {
  test('it validates whether the value is email', () => {
    const rule = email()

    expect(rule.$validator(undefined, null, null)).toBe(true)
    expect(rule.$validator(null, null, null)).toBe(true)
    expect(rule.$validator('', null, null)).toBe(true)
    expect(rule.$validator([], null, null)).toBe(true)
    expect(rule.$validator('someone@gmail.com', null, null)).toBe(true)
    expect(rule.$validator('someone@g-mail.com', null, null)).toBe(true)
    expect(rule.$validator('some!one@gmail.com', null, null)).toBe(true)
    expect(rule.$validator('soMe12_one@gmail.com', null, null)).toBe(true)
    expect(rule.$validator('someone@gmail.co', null, null)).toBe(true)
    expect(rule.$validator('someone@g.cn', null, null)).toBe(true)
    expect(rule.$validator('someone@g.accountants', null, null)).toBe(true)
    expect(rule.$validator('"some@one"@gmail.com', null, null)).toBe(true)
    expect(rule.$validator('"some one"@gmail.com', null, null)).toBe(true)
    expect(rule.$validator('user.name+tag+sorting@example.com', null, null)).toBe(true)
    expect(rule.$validator('"john..doe"@example.org', null, null)).toBe(true)
    expect(rule.$validator('someone@Example.com', null, null)).toBe(true)

    expect(rule.$validator(true, null, null)).toBe(false)
    expect(rule.$validator(false, null, null)).toBe(false)
    expect(rule.$validator(1, null, null)).toBe(false)
    expect(rule.$validator({}, null, null)).toBe(false)
    expect(rule.$validator('12345', null, null)).toBe(false)
    expect(rule.$validator('asdf12345', null, null)).toBe(false)
    expect(rule.$validator(' ', null, null)).toBe(false)
    expect(rule.$validator('someone@', null, null)).toBe(false)
    expect(rule.$validator('someone@gmail', null, null)).toBe(false)
    expect(rule.$validator('someone@gmail.', null, null)).toBe(false)
    expect(rule.$validator('someone@gmail.c', null, null)).toBe(false)
    expect(rule.$validator('gmail.com', null, null)).toBe(false)
    expect(rule.$validator('@gmail.com', null, null)).toBe(false)
    expect(rule.$validator('someone@g~mail.com', null, null)).toBe(false)
    expect(rule.$validator('someone@g=ail.com', null, null)).toBe(false)
    expect(rule.$validator('"someone@gmail.com', null, null)).toBe(false)
    expect(rule.$validator('nonvalid±@gmail.com', null, null)).toBe(false)
    expect(rule.$validator('joão@gmail.com', null, null)).toBe(false)
    expect(rule.$validator('someõne@gmail.com', null, null)).toBe(false)
    expect(rule.$validator('someone@gmail.com ', null, null)).toBe(false)
    expect(rule.$validator('someone@gmail.com    ', null, null)).toBe(false)
    expect(rule.$validator(' someone@gmail.com', null, null)).toBe(false)
    expect(rule.$validator('some one@gmail.com', null, null)).toBe(false)
  })

  test('default error message', () => {
    const rule = email()
    expect(rule.$message({ $params: {} })).toBe('The Email is invalid.')
  })

  test('it can set custom error message', () => {
    const rule = email('Custom message.')
    expect(rule.$message({ $params: {} })).toBe('Custom message.')
  })
})
